palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_inches,
height = height_in_inches)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Create a named vector of colors that matches the Python dictionary
color_vector <- setNames(palette, unique(data$function.))
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Create a named vector of colors that matches the Python dictionary
color_vector <- setNames(palette, unique(data$function.))
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
# Define the same color palette
palette <- c("#000000", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert inches to pixels for png
width_in_px = width_in_inches * 300
height_in_px = height_in_inches * 300
# Create a png file instead of pdf
png(filename = '/Users/nilmat/Desktop/preprint_figs/treemap.png',
width = width_in_px,
height = height_in_px,
res = 300)
# Define the same color palette
palette <- c("#000000", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
# Close the png device
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert inches to pixels for png
width_in_px = width_in_inches * 300
height_in_px = height_in_inches * 300
# Create a png file instead of pdf
png(filename = '/Users/nilmat/Desktop/preprint_figs/treemap.png',
width = width_in_px,
height = height_in_px,
res = 300)
# Define the same color palette
palette <- c("#800E1F", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
# Close the png device
dev.off()
BiocManager::install(c("TreeAndLeaf","RedeR"))
#-- Load packages
library("TreeAndLeaf")
library("RedeR")
library("igraph")
library("RColorBrewer")
dim(USArrests)
head(USArrests)
hc <- hclust(dist(USArrests), "ave")
plot(hc, main="Dendrogram for the 'USArrests' dataset",
xlab="", sub="")
setwd("~/Documents/streptsd/data/processed/modulome")
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
# Read the data
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
tal <- treeAndLeaf(hc)
rdp <- RedPort()
calld(rdp)
resetd(rdp)
addGraph(obj = rdp, g = tal, gzoom=75)
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=50)
addGraph(obj = rdp, g = tal, gzoom=75)
addGraph(obj = rdp, g = tal, gzoom=10)
addGraph(obj = rdp, g = tal, gzoom=75)
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
#--- Call 'relax' to fine-tune the leaf nodes
relax(rdp, p1=25, p2=200, p3=10, p4=100, p5=10, ps=TRUE)
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
#--- Call 'relax' to fine-tune the leaf nodes
relax(rdp, p1=25, p2=200, p3=10, p4=100, p5=10, ps=TRUE)
addGraph(obj = rdp, g = tal, gzoom=75)
library("TreeAndLeaf")
library("RedeR")
library("igraph")
library("ape")
library("ggtree")
BiocManager::install("ggtree")
tal <- att.mapv(g = tal, dat = data, refcol = 0)
head(data)
#--- Set graph attributes using the 'att.setv' wrapper function
pal <- brewer.pal(9, "Reds")
tal <- att.setv(g = tal, from = "salb_Phosphate", to = "nodeColor",
cols = pal, nquant = 5)
#--- Set graph attributes using 'att.addv' and 'att.adde' functions
tal <- att.addv(tal, "nodeFontSize", value = 15, index = V(tal)$isLeaf)
tal <- att.adde(tal, "edgeWidth", value = 3)
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#--- Map attributes to the tree-and-leaf
#Note: 'refcol = 0' indicates that 'dat' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = data, refcol = 0)
#--- Set graph attributes using the 'att.setv' wrapper function
pal <- brewer.pal(9, "Reds")
tal <- att.setv(g = tal, from = "salb_Phosphate", to = "nodeColor",
cols = pal, nquant = 5)
#--- Set graph attributes using 'att.addv' and 'att.adde' functions
tal <- att.addv(tal, "nodeFontSize", value = 15, index = V(tal)$isLeaf)
tal <- att.adde(tal, "edgeWidth", value = 3)
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#--- Map attributes to the tree-and-leaf
#Note: 'refcol = 0' indicates that 'dat' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = data, refcol = 0)
#--- Set graph attributes using the 'att.setv' wrapper function
pal <- brewer.pal("Reds")
hc <- hclust(dist(USArrests), "ave")
plot(hc, main="Dendrogram for the 'USArrests' dataset",
xlab="", sub="")
hc <- hclust(dist(USArrests), "ave")
plot(hc, main="Dendrogram for the 'USArrests' dataset",
xlab="", sub="")
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Map attributes to the tree-and-leaf
#Note: 'refcol = 0' indicates that 'dat' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = USArrests, refcol = 0)
#--- Set graph attributes using the 'att.setv' wrapper function
pal <- brewer.pal(9, "Reds")
tal <- att.setv(g = tal, from = "Murder", to = "nodeColor",
cols = pal, nquant = 5)
tal <- att.setv(g = tal, from = "UrbanPop", to = "nodeSize",
xlim = c(10, 50, 5), nquant = 5)
#--- Set graph attributes using 'att.addv' and 'att.adde' functions
tal <- att.addv(tal, "nodeFontSize", value = 15, index = V(tal)$isLeaf)
tal <- att.adde(tal, "edgeWidth", value = 3)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
#--- Call 'relax' to fine-tune the leaf nodes
relax(rdp, p1=25, p2=200, p3=5, p5=5, ps=TRUE)
# Read the data
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#--- Map attributes to the tree-and-leaf
#Note: 'refcol = 0' indicates that 'dat' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = data, refcol = 0)
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#--- Map attributes to the tree-and-leaf
#Note: 'refcol = 0' indicates that 'dat' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = data, refcol = 0)
# Read the data
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#--- Map attributes to the tree-and-leaf
#Note: 'refcol = 0' indicates that 'dat' rownames will be used as mapping IDs
tal <- att.mapv(g = tal, dat = data, refcol = 0)
# Read the data
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data), "ave")
plot(hc, main="Dendrogram for the filtered weights",
xlab="", sub="")
#--- Set graph attributes using the 'att.setv' wrapper function
pal <- brewer.pal(9, "Reds")
#-- Convert the 'hclust' object into a 'tree-and-leaf' object
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
hc <- hclust(dist(data))
hc
den <- as.dendrogram(hc)
den
clus <- cutree(hc, 4)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
library("TreeAndLeaf")
library("RedeR")
library("igraph")
library("ape")
library("ggtree")
library("dendextend")
library("dplyr")
library("ggplot2")
library("RColorBrewer")
clus <- cutree(hc, 4)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "cyl"])
#-- Load packages
library("TreeAndLeaf")
library("RedeR")
library("igraph")
library("ape")
library("ggtree")
library("dendextend")
library("dplyr")
library("ggplot2")
library("RColorBrewer")
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data))
hc
den <- as.dendrogram(hc)
den
clus <- cutree(hc, 4)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "cyl"])
clus <- cutree(hc, 4)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "salb_Phosphate"])
p %<+% d +
layout_dendrogram() +
geom_tippoint(aes(fill=factor(cyl), x=x+.5),
size=5, shape=21, color='black') +
geom_tiplab(aes(label=cyl), size=3, hjust=.5, color='black') +
geom_tiplab(angle=90, hjust=1, offset=-10, show.legend=FALSE) +
scale_color_brewer(palette='Set1', breaks=1:4) +
theme_dendrogram(plot.margin=margin(6,6,80,6)) +
theme(legend.position=c(.9, .6))
p %<+% d +
layout_dendrogram()
clus <- cutree(hc, 3)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "salb_Phosphate"])
p %<+% d +
layout_dendrogram()
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data))
hc
den <- as.dendrogram(hc)
den
clus <- cutree(hc, 3)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "salb_Phosphate"])
clus <- cutree(hc, 2)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "salb_Phosphate"])
# Read the data
data <- read.csv('treeleaf_test.csv', row.names = 1)
head(data)
hc <- hclust(dist(data))
hc
den <- as.dendrogram(hc)
den
clus <- cutree(hc, 2)
g <- split(names(clus), clus)
p <- ggtree(hc, linetype='dashed')
clades <- sapply(g, function(n) MRCA(p, n))
p <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)
d <- data.frame(label = names(clus),
cyl = data[names(clus), "salb_Phosphate"])
p %<+% d +
layout_dendrogram()
tal <- treeAndLeaf(hc)
#--- Call RedeR application
rdp <- RedPort()
calld(rdp)
resetd(rdp)
#--- Send the tree-and-leaf to the interactive R/Java interface
addGraph(obj = rdp, g = tal, gzoom=75)
