print("Hello world")
install.packages("rmarkdown")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# Install MSstats in R if not already installed
ro.r('if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")')
install.packages("BiocManager")
BiocManager::install(c("limma", "edgeR")
)
install.packages("WGCNA")
library(WGCNA)
library(WGCNA)
install.packages("GO.db")
library(WGCNA)
remove.packages("WGCNA")
library(WGCNA)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GO.db")
install.packages("WGCNA")
library(WGCNA)
BiocManager::install("impute")
library(WGCNA)
BiocManager::install("preprocessCore")
library(WGCNA)
BiocManager::install("AnnotationDbi")
library(WGCNA)
options(stringsAsFactors=F)
allowWGCNAThreads()
counts <- read.table(file.choose(),header=TRUE,row.names=1)
View(counts)
counts <- read.csv(file.choose(),header=TRUE,row.names=1)
install.packages("cplexAPI")
devtools::install_github(“kevincjnixon/gpGeneSets”)
#Bioconductor packages don't install automatically on BinfTools install
BiocManager::install("SAGx") #This package isn't available for the latest version of R. It has been removed as a dependency
library(gpGeneSets)
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
svg(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/Fig2c_treemap.svg'),
width = 8.5,
height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
svg(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.svg'),
width = 8.5,
height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
png(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.png'),
width = 8.5,
height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
png(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.png'),
width = 850,
height = 700)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
png(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.png'),
width = 850,
height = 700)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
png(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.png'),
width = 850,
height = 700)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
png(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.png'),
width = 850,
height = 700)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
png(file = ('/Users/nilmat/Documents/streptsd/reports/figures/modulome/treemap.png'),
width = 850,
height = 700)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = 850,
height = 700)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Set the resolution in ppi
resolution = 300
# Calculate the size in pixels
width_in_pixels = width_in_inches * resolution
height_in_pixels = height_in_inches * resolution
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_pixels,
height = height_in_pixels,
res = resolution)
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_inches,
height = height_in_inches)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Create a named vector of colors that matches the Python dictionary
color_vector <- setNames(palette, unique(data$function.))
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Create a named vector of colors that matches the Python dictionary
color_vector <- setNames(palette, unique(data$function.))
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
# Define the same color palette
palette <- c("#000000", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert inches to pixels for png
width_in_px = width_in_inches * 300
height_in_px = height_in_inches * 300
# Create a png file instead of pdf
png(filename = '/Users/nilmat/Desktop/preprint_figs/treemap.png',
width = width_in_px,
height = height_in_px,
res = 300)
# Define the same color palette
palette <- c("#000000", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
# Close the png device
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert inches to pixels for png
width_in_px = width_in_inches * 300
height_in_px = height_in_inches * 300
# Create a png file instead of pdf
png(filename = '/Users/nilmat/Desktop/preprint_figs/treemap.png',
width = width_in_px,
height = height_in_px,
res = 300)
# Define the same color palette
palette <- c("#800E1F", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
# Close the png device
dev.off()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DiffLogo")
browseVignettes("DiffLogo")
setwd("~/Documents/streptsd/modulome-workflow/5_characterize_iModulons/motifs/Surugamide-2")
library(DiffLogo)
library(MotifDB)
library(DiffLogo)
motif_names = c("surugamide-1", "surugamide-2.2")
motifs = list()
for (name in motif_names) {
fileName = paste(name, ".pwm.txt", sep="\t")
file = system.file(fileName, package = "DiffLogo")
motifs[[name]] = getPwmFromFile(file)
}
sur1 = getPwmFromFile("surugamide-1.pmw.txt")
sur2 = getPwmFromFile("surugamide-2.2.pmw.txt")
sur1 = getPwmFromFile("surugamide-1.pmw")
sur1 = getPwmFromPwmFile("surugamide-1.pmw")
sur1 = getPwmFromPwmFile("surugamide-1.pmw.txt")
sur1 = getPwmFromPwmFile("surugamide-1.pmw.txt")
sur2 = getPwmFromPwmFile("surugamide-2.2.pmw.txt")
sur1 = getPwmFromPwmFile("surugamide-1.pmw.txt")
sur2 = getPwmFromPwmFile("surugamide-2.2.pmw.txt")
BiocManager::install("seqLogo")
library(DiffLogo)
library(seqLogo)
seqLogo::seqLogo(pwm = pwm1)
seqLogo::seqLogo(pwm = sur1)
seqLogo::seqLogo(pwm = sur2)
diffLogoFromPwm(pwm1 = sur1, pwm2 = sur2)
pwms = list(sur1, sur2)
alignment = multipleLocalPwmsAlignment(pwms)
aligned_pwms = extendPwmsFromAlignmentVector(pwms, alignment$aligned_pwms)
sur1 = getPwmFromPwmFile("surugamide-1.pmw.txt")
sur2 = getPwmFromPwmFile("surugamide-2.2.pmw.txt")
diffLogoFromPwm(pwm1 = sur1, pwm2 = sur2)
diffLogoFromPwm(pwm1 = sur1, pwm2 = sur2, align_pwms = TRUE)
sur1 = getPwmFromPwmFile("surugamide-1.pmw.txt")
sur2 = getPwmFromPwmFile("surugamide-2.2.pmw.txt")
sur3 = getPwmFromPwmFile("surugamide-3.pmw.txt")
diffLogoFromPwm(pwm1 = sur1, pwm2 = sur3, align_pwms = TRUE)
motifs = [sur1, sur2, sur3]
motifs = list(sur1, sur2, sur3)
diffLogoTable(PWMs = motifs)
setwd("~/Documents/streptsd/data/interim/modulome/pmws")
sur1 = getPwmFromPwmFile("Ammonium_pwm.txt")
sur2 = getPwmFromPwmFile("Antimycin_pwm.txt")
sur3 = getPwmFromPwmFile("Arsenate_pwm.txt")
motifs = list(sur1, sur2, sur3)
diffLogoTable(PWMs = motifs)
setwd("~/Documents/streptsd/data/interim/modulome")
library(DiffLogo)
library(seqLogo)
motif_folder = "pmws/"
motif_files = list.files(motif_folder, pattern = "\\.txt$")  # Get all .pwm files in the motif_folder
motifs_dna = list()
for (file in motif_files) {
name = sub("\\.txt$", "", file)  # Remove the .pwm extension from the file name to get the motif name
full_path = paste(motif_folder, "/", file, sep = "")
motifs_dna[[name]] = getPwmFromPwmFile(full_path)
}
head(motifs_dna)
diffLogoTable(PWMs = motifs_dna)
# Export DiffLogo table as a pdf file
fileName = "Comparison_of_multiple_motifs.pdf"
resolution = 300  # Set the resolution
width = 80  # Set the width
height = 60  # Set the height
pdf(filename = fileName, res = resolution, width = width, height = height)
library(grDevices)
# Export DiffLogo table as a pdf file
fileName = "Comparison_of_multiple_motifs.pdf"
resolution = 300  # Set the resolution
width = 80  # Set the width
height = 60  # Set the height
grDevices::pdf(file = fileName, res = resolution, width = width, height = height)
fileName = "Comparison_of_multiple_motifs.pdf"
pointsize = 8  # Set the default size of the text
width = 80  # Set the width in inches
height = 60  # Set the height in inches
grDevices::pdf(file = fileName, pointsize = pointsize, width = width, height = height)
diffLogoTable(PWMs = motifs_dna)
dev.off()
