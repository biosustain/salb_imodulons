height = height_in_inches)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_inches,
height = height_in_inches)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Create a named vector of colors that matches the Python dictionary
color_vector <- setNames(palette, unique(data$function.))
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Create a named vector of colors that matches the Python dictionary
color_vector <- setNames(palette, unique(data$function.))
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert the size to pixels
width_in_pixels = width_in_inches * 300
height_in_pixels = height_in_inches * 300
# Save the figure as a PNG with 300 dpi
png(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.png'),
width = width_in_pixels,
height = height_in_pixels,
res = 300)
# Define the same color palette
palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette='Set2',
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
pdf(file = ('/Users/nilmat/Desktop/preprint_figs/treemap.pdf'),
width = width_in_inches,
height = height_in_inches)
# Define the same color palette
palette <- c("#000000", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert inches to pixels for png
width_in_px = width_in_inches * 300
height_in_px = height_in_inches * 300
# Create a png file instead of pdf
png(filename = '/Users/nilmat/Desktop/preprint_figs/treemap.png',
width = width_in_px,
height = height_in_px,
res = 300)
# Define the same color palette
palette <- c("#000000", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
# Close the png device
dev.off()
library(treemap)
data <- read.csv("/Users/nilmat/Documents/streptsd/data/interim/modulome/data_for_treemap.csv")
# Set the size in inches
width_in_inches = 8.5
height_in_inches = 7
# Convert inches to pixels for png
width_in_px = width_in_inches * 300
height_in_px = height_in_inches * 300
# Create a png file instead of pdf
png(filename = '/Users/nilmat/Desktop/preprint_figs/treemap.png',
width = width_in_px,
height = height_in_px,
res = 300)
# Define the same color palette
palette <- c("#800E1F", "#FF66C4", "#0097B2", "#00BF63", "#545454", "#CB6CE6", "#0CC0DF", "#7ED957", "#A6A6A6", "#8C52FF", "#5CE1E6", "#FFBD59", "#FF3131", "#5E17EB", "#5271FF", "#FF914D")
# Use the defined palette in the treemap
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=14,
palette=palette,
)
# Close the png device
dev.off()
install.packages("UpSetR")
library(UpSetR)
# Load the mutations data set (representing mutations for the 100 most mutated genes in a glioblastoma multiforme cohort)
mutations <- read.csv(system.file("extdata", "mutations.csv", package = "UpSetR"), header = TRUE, sep = ",")
View(mutations)
upset(mutations, sets = c("PTEN", "TP53", "EGFR", "PIK3R1", "RB1"),
sets.bar.color = "#56B4E9", order.by = "freq", empty.intersections = "on")
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv"), header = TRUE, sep = ","
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
View(top5)
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets)
upset(top5, sets = all_sets, width_ratio=1, height_ration=2)
# Load your dataset (assuming it's in CSV format)
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Create an UpSet plot with adjusted dimensions
upset(top5, sets = all_sets, width_ratio = 1, height_ratio = 2)  # You can adjust the height_ratio as needed
# Load your dataset (assuming it's in CSV format)
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Create an UpSet plot
upset(top5, sets = all_sets)
# Adjust the figure height (you can change the value as needed)
# Note: This line should be placed after creating the plot
par(mar = c(5, 4, 4, 2) + 0.1)  # Adjust the margins for taller plot
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq", empty.intersections = "on")
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq", empty.intersections = "off")
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq")
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Set the bottom and top margins to larger values
par(mar = c(6, 4, 6, 2))
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq")
# Reset the margins to the default values
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Open a PDF device with specified width and height
pdf("/Users/nilmat/Documents/yeast/data/processed/upset_plot.pdf", width = 10, height = 20)
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq")
# Close the PDF device
dev.off()
library(UpSetR)
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Open a PDF device with larger width and height
pdf("/Users/nilmat/Documents/yeast/data/processed/upset_plot.pdf", width = 15, height = 25)
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq")
# Close the PDF device
dev.off()
library(UpSetR)
top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(top5)[2:ncol(top5)]  # Exclude the first column (sequences)
# Open a PDF device with specified width and height
pdf("/Users/nilmat/Documents/yeast/data/processed/nt_upset_plot.pdf", width = 15, height = 25)
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq")
# Close the PDF device
dev.off()
aa_top5 <- read.csv("/Users/nilmat/Documents/yeast/data/processed/aa_upset_data.csv", header = TRUE, sep = ",")
# Assuming your dataset contains columns '1FgAgo1_A', '1FgAgo2_A', ..., '8FoAgo4_A'
all_sets <- colnames(aa_top5)[2:ncol(aa_top5)]  # Exclude the first column (sequences)
# Open a PDF device with specified width and height
pdf("/Users/nilmat/Documents/yeast/data/processed/aa_upset_plot.pdf", width = 15, height = 25)
# Create an UpSet plot with all existing sets
upset(top5, sets = all_sets, sets.bar.color = "#56B4E9", order.by = "freq")
# Close the PDF device
dev.off()
setwd("~/Documents/cleanup/modulome-workflow/figures")
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels to black
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = 0,
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "darkgrey", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#6e6e6eff", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#33333333", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#22222222", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#23232323", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#A9A9A9", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#232323", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#383838", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Spectral"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#676767", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Paired"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#676767", # Add dark grey background for the labels
)
dev.off()
library(treemap)
library(RColorBrewer)
setwd("~/Documents/cleanup/modulome-workflow/figures")
data <- read.csv("../../data/interim/modulome/data_for_treemap.csv")
# Create a color palette with 21 colors
color_palette <- colorRampPalette(brewer.pal(8, "Paired"))(21)
pdf(file = '../../reports/figures/modulome/treemap2.pdf', width = 8.5, height = 7)
treemap(data,
index=c("function.","iModulon"),
vSize="size",
type="categorical",
vColor='function.',
fontsize.labels=12, # Increase the size of the labels
fontcolor.labels="white", # Change the color of the labels
palette=color_palette, # Use the new color palette
border.col = "white",# Use white lines
bg.labels = "#67676767", # Add dark grey background for the labels
)
dev.off()
